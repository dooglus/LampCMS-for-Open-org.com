<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;
require_once 'bootstrap.php';

require_once 'Fixtures/MockUser.php';


use Lampcms\User;

/**
 * Must be run after MongoDocTest
 * 
 * 
 * @author admin
 *
 */
class UserTest extends LampcmsUnitTestCase
{
	/**
	 * Collection names used in this test
	 * Enter description here ...
	 * @var unknown_type
	 */
	protected $aCollections = array('USERS');

	protected $User;

	public function setUp(){
		$this->User = \Lampcms\MockUser::factory(new Registry());
	}


	public function testFactory(){
		$o = \Lampcms\User::factory(new Registry());
		$o->setSaved();
		$this->assertTrue($o instanceof \Lampcms\User);
	}


	public function testGetRoleId(){

		$this->assertEquals('registered', $this->User->getRoleId());
	}


	/**
	 * @depends testGetRoleId
	 */
	public function testSetRoleId(){
		$this->User->setRoleId('unactivated');
		$this->assertEquals('unactivated', $this->User->getRoleId());
	}

	/**
	 * @depends testGetRoleId
	 */
	public function testSetRoleIdByAssignment(){
		$this->User['role'] = 'unactivated';
		$this->assertEquals('unactivated', $this->User->getRoleId());
	}


	/**
	 * @depends testGetRoleId
	 */
	public function testSetBadRoleId(){
		try{
			$this->User->setRoleId('badrole');
		} catch (\Lampcms\DevException $e){
			return;
		}

		$this->fail('\Lampcms\DevException expected when trying to add role that is not on the acl.ini');
	}

	/**
	 * @depends testGetRoleId
	 */
	public function testSetBadRoleIdByAssignment(){
		try{
			$this->User['role'] = 'badrole';
		} catch (\Lampcms\DevException $e){
			return;
		}

		$this->fail('\Lampcms\DevException expected when trying to add role that is not on the acl.ini');
	}

	/**
	 * @depends testSetRoleId
	 *
	 */
	public function testActivate(){
		$this->User->setRoleId('unactivated');
		$this->User->activate();
		$this->assertEquals('registered', $this->User->getRoleId());
	}


	public function testGetAge(){
		$age = $this->User->getAge();
		$this->assertTrue(is_numeric($age));
		$this->assertTrue(is_string($age));
		$this->assertTrue( 20 < (int)$age && 100 > (int)$age);
	}


	public function testGetAvatarSrc(){
		$s = $this->User->getAvatarSrc();
		$this->assertEquals('http://img.lampcms.com/w/img/avatar/sqr/1A.jpg', $s);

	}

	/**
	 * @depends testGetAvatarSrc
	 *
	 */
	public function testGetAvatarSrcNoCache(){
		$s = $this->User->getAvatarSrc(true);
		$this->assertTrue(false !== (strstr($s, 'http://img.lampcms.com/w/img/avatar/sqr/1A.jpg?id=1')) );

	}

	/**
	 * @depends testGetAvatarSrc
	 *
	 */
	public function testGetAvatarImgSrc(){
		$s = $this->User->getAvatarImgSrc();
		$this->assertEquals('<img src="http://img.lampcms.com/w/img/avatar/sqr/1A.jpg" class="img_avatar" width="40" height="40" border="0" alt="avatar">', $s);
	}

	public function testGetFullName(){
		$this->assertEquals('John D Doe', $this->User->getFullName());
	}

	/**
	 * @depends testGetFullName
	 *
	 */
	public function testGetDisplayName(){
		$this->assertEquals('John D Doe', $this->User->getDisplayName());

		$this->User->offsetUnset('fn');
		$this->User->offsetUnset('mn');
		$this->User->offsetUnset('ln');
		$this->User->setSaved();

		$this->assertEquals('ladada', $this->User->getDisplayName());
	}


	public function testGetLocation(){
		$this->assertEquals('Stroudsburg, PA United States', $this->User->getLocation());
	}

	public function testGetProfileUrl(){
		$this->assertEquals('/users/26/ladada', $this->User->getProfileUrl());
	}


	public function testGetProfitPoint(){
		$this->assertEquals(1, $this->User->getProfitPoint());
	}

	/**
	 * @depends testGetProfit Point
	 *
	 */
	public function testSetProfitPoint(){
		$this->User->setProfitPoint(0);
		$this->assertEquals(1, $this->User->getProfitPoint());
		$this->User->setProfitPoint(25);
		$this->assertEquals(26, $this->User->getProfitPoint());
		$this->User->setSaved();
	}


	public function testAssignProfitPoint(){
		try{
			$this->User['i_pp'] = 10;
		} catch (\Lampcms\DevException $e){
			return;
		}

		$this->fail('\Lampcms\DevException is expected when assigning value of i_pp');
	}


	public function testGetUid(){
		$this->assertEquals(26, $this->User->getUid());
		$this->User->offsetUnset('_id');
		$this->User->setSaved();
		$this->assertEquals(0, $this->User->getUid());
	}

	public function testGetUrl(){
		$this->assertEquals('<a rel="nofollow" href="http://www.lampcms.com">http://www.lampcms.com</a>', $this->User->getUrl());
	}

	public function testIsGuest(){
		$this->assertFalse($this->User->isGuest());
	}

	/**
	 * @depends testGetRoleId
	 *
	 */
	public function testIsModerator(){
		$this->assertFalse($this->User->isModerator());
		$this->User->setRoleId('moderator');
		$this->assertTrue($this->User->isModerator());
		$this->User->setRoleId('administrator');
		$this->assertTrue($this->User->isModerator());
		$this->User->setSaved();
	}

	public function testSetLastActive(){
		$now = time();
		$this->User->setLastActive();
		$this->assertTrue( ($this->User['i_lm_ts'] - $now) < 2 );
		sleep(3);
		$this->assertFalse((time() - $now) < 2);
		$this->User->setLastActive();
		$this->assertTrue( ($this->User['i_lm_ts'] - $now) < 2 );
		$this->User->setSaved();
	}


	public function testSetTime(){
		$this->User->setTime();
		$this->assertEquals('Atlantic/Azores', \date_default_timezone_get());
	}

	/**
	 * @depends testSetTime
	 *
	 */
	public function testSetGetTimezone(){
		$this->User->setTimezone('Europe/London');
		$this->assertEquals('Europe/London', $this->User->getTimezone());

		$this->User->setTimezone('Europe/Helsinki');
		$this->assertEquals('Europe/Helsinki', $this->User->getTimezone());

		$this->User->setTimezone('Africa/Abidjan');
		$this->assertEquals('Africa/Abidjan', $this->User->getTimezone());

		$this->User->setTimezone('Atlantic/Bermuda');
		$this->assertEquals('Atlantic/Bermuda', $this->User->getTimezone());

		$this->User->setTimezone('Australia/Melbourne');
		$this->assertEquals('Australia/Melbourne', $this->User->getTimezone());

		$this->User->setTimezone('America/Argentina/San_Luis');
		$this->assertEquals('America/Argentina/San_Luis', $this->User->getTimezone());

		$this->User->setTimezone('America/New_York');
		$this->assertEquals('America/New_York', $this->User->getTimezone());

		/**
		 * Setting Invalid timezone will not work
		 * previous value will still be there!
		 */
		$this->User->setTimezone('America/Bad_Time');
		$this->assertEquals('America/New_York', $this->User->getTimezone());

		$this->User->setSaved();
	}


	/**
	 * @depends testSetTime
	 *
	 */
	public function testSetTimezoneByAssignment(){
		$this->User['tz'] = 'America/New_York';
		$this->assertEquals('America/New_York', $this->User->getTimezone());

		$this->User['tz'] = 'America/Bad_Time';
		$this->assertEquals('America/New_York', $this->User->getTimezone());

		$this->User->setSaved();
	}
	
	public function testSave(){
		$Registry = new Registry();
		$this->User->offsetUnset('_id');
		$this->User->save();
		$a = $Registry->Mongo->USERS->findOne(array('username_lc' => 'ladada'));
		$this->assertTrue(is_array($a) && count($a) > 5);
	}
}
